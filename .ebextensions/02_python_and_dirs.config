container_commands:
  01_create_audio_dirs:
    command: |
      echo "Creating audio cache and outputs dirs"
      mkdir -p /var/app/current/audio_cache /var/app/current/outputs
      if id webapp >/dev/null 2>&1; then
        chown -R webapp:webapp /var/app/current/audio_cache /var/app/current/outputs || true
      elif id nodejs >/dev/null 2>&1; then
        chown -R nodejs:nodejs /var/app/current/audio_cache /var/app/current/outputs || true
      else
        chown -R ec2-user:ec2-user /var/app/current/audio_cache /var/app/current/outputs || true
      fi

  02_verify_ffmpeg_installation:
    command: |
      echo "=== FFmpeg verification ==="
      which ffmpeg || echo "ffmpeg not found"
      if command -v ffmpeg >/dev/null 2>&1; then
        ffmpeg -version | head -n1 || true
      fi
      echo "PATH: $PATH"

  03_create_sys_venv:
    command: |
      echo "Creating system venv at /var/app/venv if missing"
      if [ ! -d /var/app/venv ]; then
        python3 -m venv /var/app/venv || true
      fi

  04_install_pytorch_cpu:
    command: |
      echo "Activating venv and installing PyTorch (CPU wheels) first"
      set -e
      . /var/app/venv/bin/activate
      pip install --upgrade pip setuptools wheel
      # install CPU wheels explicitly (faster & avoids source builds)
      pip uninstall -y torch torchaudio || true
      pip install --no-cache-dir --index-url https://download.pytorch.org/whl/cpu torch torchaudio
    leader_only: false
    ignoreErrors: false

  05_install_requirements:
    command: |
      echo "Installing requirements.txt into /var/app/venv"
      set -e
      . /var/app/venv/bin/activate
      pip install --no-cache-dir -r /var/app/current/requirements.txt
    leader_only: false
    ignoreErrors: false

  06_install_whisperx:
    command: |
      echo "Installing whisperx from GitHub"
      set -e
      . /var/app/venv/bin/activate
      pip install --no-cache-dir git+https://github.com/m-bain/whisperx.git
    leader_only: false
    ignoreErrors: false

  07_copy_vendor_ffmpeg:
    command: |
      echo "If vendor/ffmpeg exists in app bundle, symlink it into /usr/local/bin"
      if [ -f /var/app/current/vendor/ffmpeg ]; then
        echo "Found vendor/ffmpeg, copying to /usr/local/bin"
        cp -f /var/app/current/vendor/ffmpeg /usr/local/bin/ffmpeg || true
        cp -f /var/app/current/vendor/ffprobe /usr/local/bin/ffprobe || true
        chmod +x /usr/local/bin/ffmpeg /usr/local/bin/ffprobe || true
        ln -sf /usr/local/bin/ffmpeg /usr/bin/ffmpeg || true
        ln -sf /usr/local/bin/ffprobe /usr/bin/ffprobe || true
      else
        echo "No vendor/ffmpeg provided"
      fi
    leader_only: false
    ignoreErrors: true
